<?php
/**
 * Theme functions and definitions.
 * This child theme was generated by Merlin WP.
 *
 * @link https://developer.wordpress.org/themes/basics/theme-functions/
 */

/*
 * If your child theme has more than one .css file (eg. ie.css, style.css, main.css) then
 * you will have to make sure to maintain all of the parent theme dependencies.
 *
 * Make sure you're using the correct handle for loading the parent theme's styles.
 * Failure to use the proper tag will result in a CSS file needlessly being loaded twice.
 * This will usually not affect the site appearance, but it's inefficient and extends your page's loading time.
 *
 * @link https://codex.wordpress.org/Child_Themes
 */
function buddyxpro_child_enqueue_styles() {
	wp_enqueue_style( 'buddyx-pro-style', get_template_directory_uri() . '/style.css' );
	wp_enqueue_style(
		'buddyx-pro-child-style',
		get_stylesheet_directory_uri() . '/style.css',
		array( 'buddyx-pro-style' ),
		wp_get_theme()->get( 'Version' )
	);
}

add_action( 'wp_enqueue_scripts', 'buddyxpro_child_enqueue_styles' );

if ( get_stylesheet() !== get_template() ) {
	add_filter(
		'pre_update_option_theme_mods_' . get_stylesheet(),
		function ( $value, $old_value ) {
			update_option( 'theme_mods_' . get_template(), $value );
			return $old_value; // prevent update to child theme mods.
		},
		10,
		2
	);
	add_filter(
		'pre_option_theme_mods_' . get_stylesheet(),
		function (
			$default_values
		) {
			return get_option( 'theme_mods_' . get_template(), $default_values );
		}
	);
}

// Gravity Forms Customization for creating The Events Calendar events from the front end
// Reference: https://docs.gravityforms.com/advanced-post-creation-add-on-using-third-party-post-types/#h-populating-drop-down-with-event-categories

add_action( 'gform_advancedpostcreation_post_after_creation', 'update_event_information', 10, 4 );
function update_event_information( $post_id, $feed, $entry, $form ){
    //update the All Day setting
    $all_day = $entry['9.1'];
    if ( $all_day == 'All Day' ){
        update_post_meta( $post_id, '_EventAllDay', 'yes');
    }
  
    //update the Hide From Monthly View Setting
    $hide = $entry['9.2'];
    if ( $hide == 'Hide From Event Listings') {
        update_post_meta( $post_id, '_EventHideFromUpcoming', 'yes' );
    }
  
    //update the Sticky in Month View setting
    $sticky = $entry['9.3'];
    if ( $sticky == 'Sticky in Month View' ){
        wp_update_post(array( 'ID' => $post_id, 'menu_order' => '-1' ) );
    }
    else{
        wp_update_post(array( 'ID' => $post_id, 'menu_order' => '0' ) );
    }
  
    //update the Feature Event setting
    $feature = $entry['9.4'];
    if ( $feature == 'Feature Event'){
        update_post_meta( $post_id, '_tribe_featured', '1');
    }
    else{
        update_post_meta( $post_id, '_tribe_featured', '0');
    }
}

///// MEMBER DIRECTORY

/**
 * Sort users by last name
 *
 * Changes the querystring for the member directory to sort users by their last name
 *
 * @param BP_User_Query $bp_user_query
 */
function alphabetize_by_last_name( $bp_user_query ) {
    if ( 'alphabetical' == $bp_user_query->query_vars['type'] )
        $bp_user_query->uid_clauses['orderby'] = "ORDER BY substring_index(u.display_name, ' ', -1)";
}
add_action ( 'bp_pre_user_query', 'alphabetize_by_last_name' );



///////////////////////// Member Directory Customization (from Youzify)

/**
 * Select Alphabet on Select Box.
 * https://gist.github.com/KaineLabs/4795fa7a6725389b246c9b4020491798#file-yzc_make_alphabet_selected-php
 */
function yzc_make_alphabet_selected() {

    ?>
    <script type="text/javascript">

    ( function( $ ) {

    $( document ).ready( function() {
    
        jQuery( '#members-order-by option[value="alphabetical"], #groups-order-by option[value="alphabetical"]' ).attr( 'selected', true ).trigger( 'change');

    });

    })( jQuery );
    </script>
    <?php

}
//add_action( 'wp_footer', 'yzc_make_alphabet_selected' );

///////////////////////////////


///////////////////////// WP-Members profile sync

/**
 * Map xProfile fields to WP-Members fields during registration.
 *
 * @param array $fields     WP-Members fields.
 * @param array $userdata   User data from the registration form.
 *
 * @return array            Mapped fields.
 */
function my_map_xprofile_fields($fields, $userdata) {
    // Get xProfile field data
    $xprofile_data = isset($_POST['xprofile-data']) ? $_POST['xprofile-data'] : array();

    // Get all xProfile fields
    $xprofile_groups = bp_xprofile_get_groups();
    foreach ($xprofile_groups as $group) {
        $xprofile_fields = bp_xprofile_fields_by_group($group->id);
        foreach ($xprofile_fields as $field) {
            // Map xProfile field to WP-Members field
            $fields[$field->name] = isset($xprofile_data[$field->id]) ? $xprofile_data[$field->id] : '';
        }
    }

    return $fields;
}
add_filter('wpmem_register_data', 'my_map_xprofile_fields', 10, 2);

/**
 * Save xProfile data after successful registration.
 *
 * @param int    $user_id    ID of the newly registered user.
 * @param array  $userdata   User data from the registration form.
 * @param bool   $new_user   True if a new user was registered.
 */
function my_save_xprofile_data($user_id, $userdata, $new_user) {
    if ($new_user) {
        // Get xProfile field data
        $xprofile_data = isset($_POST['xprofile-data']) ? $_POST['xprofile-data'] : array();

        // Save xProfile data for the new user
        foreach ($xprofile_data as $field_id => $field_value) {
            xprofile_set_field_data($field_id, $user_id, $field_value);
        }
    }
}
add_action('wpmem_register_successful', 'my_save_xprofile_data', 10, 3);

/**
 * Add xProfile fields to the WP-Members registration form.
 *
 * @param array $form_rows   WP-Members form rows.
 *
 * @return array Updated form rows with xProfile fields.
 */
function my_add_xprofile_fields($form_rows) {
    // Get xProfile fields markup
    $xprofile_fields = '';
    $xprofile_groups = bp_xprofile_get_groups();
    foreach ($xprofile_groups as $group) {
        $xprofile_fields .= bp_get_template_part('members/members-xprofile-fields');
    }

    // Inject xProfile fields into the form
    $form_rows['my_custom_fields'] = $xprofile_fields;

    return $form_rows;
}
add_filter('wpmem_register_form_rows', 'my_add_xprofile_fields');

///////////////////////////////


/////////////////////////////// Changes to Full Name requirement
/**
 * Change Name field With Username.
 */
function my_member_username() {
    global $members_template;
    return $members_template->member->user_login;
}

add_filter( 'bp_member_name' , 'my_member_username' );


/**
 * Change FullName field With Username.
 */
function my_bp_displayed_user_fullname( $fullname ) {
    
    if ( ! bp_is_user() ) {
        return $fullname;
    }
    global $bp;
    return isset( $bp->displayed_user->userdata->user_login ) ? $bp->displayed_user->userdata->user_login : $fullname;
}

add_filter( 'bp_displayed_user_fullname' , 'my_bp_displayed_user_fullname' );


/**
 * Header Script
 */
function yzc_sync_username_and_name_fields() {
    
    ?>

    <script>
        var url = document.location.href;
        jQuery(document).ready( function() {
            //copy profile name to account name during registration
            if ( url.indexOf( "register/" ) >= 0 ) {
                jQuery( 'label[for=field_1],#field_1' ).css( 'display', 'none' );
                jQuery( '#signup_username' ).blur( function() {
                    jQuery( '#field_1' ).val( jQuery( "#signup_username" ).val());
                });
            }
        });
    </script>

    <style type="text/css">
        #profile-details-section .logy-section-title,
        .editfield.field_1 {
            display: none;
        }

    </style>

    <?php
}
add_action( 'wp_head', 'yzc_sync_username_and_name_fields' );
///////////////////////////


/** WP Members Function
 * A drop-in code snippet to set all users on the site as 
 * "activated" (when using the plugin's moderated registration
 * setting). All existing users on the site will be set as 
 * active without affecting passwords and no email will be sent.
 *
 * To Use:
 * 1. Save the code snippet to your theme's functions.php
 * 2. Go to Tools > Activate All Users.
 * 3. Follow prompts on screen.
 * 4. Remove the code snippet when completed.
 */
add_action( 'init', 'activate_all_users_init' );
function activate_all_users_init() {
    global $wpmem;
    $wpmem->activate_all_users = New My_Activate_All_Users_Class();
}
class My_Activate_All_Users_Class {
 
    function __construct() {
        add_action( 'admin_menu', array( $this, 'admin_menu' ) );
    }

    function admin_menu() {
        $hook = add_management_page( 'Activate All Users Page', 'Activate All Users', 'edit_users', 'activate-all-users', array( $this, 'admin_page' ), '' );
        add_action( "load-$hook", array( $this, 'admin_page_load' ) );
    }

    function admin_page_load() {
        global $activate_all_complete;
        $activate_all_complete = false;
        if ( isset( $_GET['page'] ) && 'activate-all-users' == $_GET['page'] && isset( $_POST['activate-all-confirm'] ) && 1 == $_POST['activate-all-confirm'] ) {
            $users = get_users( array( 'fields'=>'ID' ) );
            foreach ( $users as $user_id ) {
                update_user_meta( $user_id, 'active', 1 );
                wpmem_set_user_status( $user_id, 0 );
            }
            $activate_all_complete = true;
        }
    }

    function admin_page() {
        global $activate_all_complete;
        echo "<h2>Activate All Users</h2>";
        if ( $activate_all_complete ) {
            echo '<p>All users were activated.<br />';
            echo 'You may now remove this code snippet if desired.</p>';
        } else {
            $form_post = ( function_exists( 'wpmem_admin_form_post_url' ) ) ? wpmem_admin_form_post_url() : '';
            echo "<p>This process will mark all existing user accounts as activated in WP-Members.<br />It will not change any passwords or send any emails to users.";
            echo '<form name="activate-all-users" id="activate-all-users" method="post" action="' . $form_post . '">';
            echo '<p><input type="checkbox" name="activate-all-confirm" value="1" /><label for="activate-all-confirm">Activate all users?</label></p>';
            echo '<p><input type="submit" name="submit" value="Submit" /></p>';
            echo '</form>';
        }
    }
}
// End of My_Activate_All_Users_Class